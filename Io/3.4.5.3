OperatorTable addAssignOperator(":", "atPutPair")

XmlDocument := Object clone

XmlDocument init := method(
    self rootNode ::= nil
    return(self)
)

XmlDocument asString := method(
    return(self printNode(rootNode, 0)
    )
)

XmlDocument getDepthPrefix := method(depth,
        return(
            "...." repeated(depth)
        )
)

XmlDocument printNode := method(xmlElement, depth,
    buffer := list
    newLine := "\n"
    depthPrefix := self getDepthPrefix(depth)
    
    buffer append(
        depthPrefix,
        "<",
        xmlElement name,
        if(
            (xmlElement attributes size > 0),
            (
                attributeBuffer := list("")
                xmlElement attributes foreach(name, value,
                    attributeBuffer append(
                        name .. "=\"" .. value .. "\""
                    )
                )

                attribute Buffer join(" ")
            ),
            (
             ""
            )
          ),
          ">",
          newLine
        );
        
        if(
            xmlElement text,
            buffer append(
                self getDepthPrefix(depth + 1),
                xmlElement text,
                newLine
            )
        )
        
        xmlElement childNodes foreach(childNode,
                buffer append(
                    self printNode(childeNode, depth + 1)
                )
        )
        
        buffer append(
            depthPrefix,
            "</",
            xmlElement name,
            ">",
            newLine
        )
        
        return(
            buffer join("")
        )
)

XmlAttributes := Map clone

XmlAttributes atPut := method(name, value,
        if(
            list("Sequence", "Number") contains(value type)

            super(atPut(name, value))
        )
        return (self) 
)

XmlElement := Object clone
XmlElement init := method(
    self name ::= nil
    self text ::= nil
    self attributes ::= XmlAttributes clone
    self childNodes ::= list
    self parentNode ::= nil
    return (self)
)

XmlParser := Object clone

XmlParser atPutPair := method(name, value,
    attribute := Map clone
    attribute atPut("name", name)
    attribute atPut("value", value)
    
    return(attribute)
)

XmlParser curlyBrackets := method(
 attributes := list
 call message arguments foreach(attibutePair,
     attibutes append(
        self doString(attibutePair asString)
    )
    )
    return (attibutes)
)

XmlParser forward := method(
 missingMethodName := call message name
 missingMethodArgs := call message arguments
 xmlElement := XmlElement clone
 xmlElement setName(missingMethodName)
 if(
    self isCurlyBrackts(missingMethodArgs at(0)),
    (
        attributesMarkup := missingMethodArgs removeFirst
        attributesList := self doMessage(attributesMarkup)
        attributesList foreach(attribute,
            xmlElement attributes atPut(
                attribute at("name"),
                attribute at("value")
            )
        )
    )
    )
 
 missingMethod Args foreach(argument,
    content := self doMessage(argument)
    if(
        content type == "XmlElement",
        (
         content setParentNode(xmlElement)
         xmlElement childNodes append(content)
        ),
        (
         xmlElement setText(content)
        )
    )
 )
 return(xmlElement)
)

XmlParser isCurlyBrackets := method(targetMessage,

        return(
            (targetMessage asString findSeq("curlyBrackets")) == 0
            )
)

XmlParser parse := method(
    xmlDoc := XmlDpcument clone
    xmlDoc setRootNode(
        self doMessage(
            call message arguments at(0)
        )
    )
    
    return(xmlDoc)
)

girls := XmlParser parse(
        girls(
            { type: "hotties", isActive: "true" },
            girl(
                {id: 17},
                name("Sarah"),
                age(35)
            ),
            girl(
                {id: 104},
                name("Joanna"),
                age(32)
            ),
            girl(
                {id: 15}
            )
        )
    );

girs println
